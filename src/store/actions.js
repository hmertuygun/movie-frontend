import {
  updateSymbols,
  updateSymbolDetails,
  updateSelectedSymbol,
  updateSelectedSymbolDetail,
  updateSelectedSymbolBalance,
  updateSelectedBaseSymbolBalance,
  updateIsLoadingBalance,
  updateSelectedSymbolLastPrice,
  updateIsLoadingLastPrice,
  updateSymbolType,
  loadLastPrice,
  loadBalance,
} from './symbols/SymbolActions'

import {
  updateExchanges,
  updateIsExchangeLoading,
  updateExchangeType,
  updateExchangeUpdated,
  updateExchangeKey,
  loadExchanges,
  updateTotalExchanges,
  updateActiveExchange,
  updateIsException,
  initExchanges,
  getUserExchangesAfterFBInit,
} from './exchanges/ExchangeActions'

import {
  updateIsOrderPlaced,
  updateIsOrderCancelled,
  updateOpenOrdersUC,
  updateDelOpenOrders,
  updateOrderEdited,
} from './orders/OrderActions'

import {
  updateDisableOrderHistoryRefreshBtn,
  updateDisableOpenOrdesrRefreshBtn,
  updateDisablePortfolioRefreshBtn,
  updateDisableAnalyticsRefreshBtn,
  updateRefreshButton,
  refreshExchanges,
} from './refresh/RefreshActions'

import {
  updateTemplateDrawings,
  updateTemplateDrawingsOpen,
  updateAddTemplateModalOpen,
  getChartTemplate,
  saveChartTemplate,
  deleteChartTemplate,
} from './templates/TemplateActions'

import {
  updateIsTradersModalOpen,
  updateActiveTrader,
  setActiveAnalysts,
} from './trades/TradeActions'

import {
  updateMarketData,
  updateShowMarketItems,
  updateWatchListOpen,
  initMarketData,
  updateProducts,
  getProducts,
} from './market/MarketActions'

import {
  updateLoadApiKeys,
  updateLoadApiKeysError,
  updateIsApiKeysLoading,
  updateNeed2FA,
  updateTokenExpiry,
  updateSecretKey,
  getApiKeys,
  saveApiKeys,
} from './apiKeys/ApiKeysActions'

import {
  updateUserData,
  updateUserState,
  updateUserContextLoaded,
  add2FA,
  verify2FA,
  delete2FA,
  login,
  logout,
  register,
  updateCanaryUser,
  getUserData,
  saveUserData,
  saveInitialUserData,
  updateCountry,
  updateIsCountryAvailable,
  getReferrals,
  saveReferrals,
  saveStripeUsers,
} from './users/UsersActions'

import {
  updateIsOnboardingSkipped,
  updateRememberCheck,
  updateLoaderVisible,
  updateOnTour,
  updateIsTourStep5,
  updateIsTourFinished,
  updateOnSecondTour,
  updateTour2CurrentStep,
  updateTwofaSecretKey,
  updateEndTrial,
  updateNeedPayment,
  updateShowSubModal,
  handleOnboardingSkip,
  handleOnboardingShow,
  sendEmailAgain,
  findFastServer,
  getPlatformMessages,
  getUserNotices,
} from './appFlow/AppFlowActions'

import {
  updateIsCheckingSub,
  updateHasSub,
  updateSubscriptionData,
  updateTrialDaysLeft,
  updateIsPaidUser,
  updateCreateSubscription,
  updateSubscriptionError,
  updateSubscriptionsDetails,
  getSubscription,
  getStripeplans,
} from './subscription/SubscriptionActions'

import {
  updateChartData,
  updateChartMirroring,
  updateIsChartReady,
  updateActiveDrawingId,
  updateActiveDrawing,
  updateAddedDrawing,
  updateChartDrawings,
  updateSettingChartDrawings,
  updateChartDataOnInit,
  updateSunburstChart,
  getChartMetaData,
  getChartDrawing,
  saveChartDrawings,
  backupChartDrawing,
} from './charts/ChartActions'

import {
  updatePairOperations,
  updatePairPerformance,
  updateAssetPerformance,
  updateAnalyticsLoading,
  updateLoadingError,
  refreshAnalyticsData,
} from './analytics/AnalyticsActions'

import {
  updateTickers,
  updateLastMessage,
  updateEstimate,
  updateBalance,
  updatePortfolioLoading,
  updateElapsed,
  updatePortMarketData,
  updateSelectedExchanges,
  refreshPortfolioData,
} from './portfolio/PortfolioActions'

import {
  addEntry,
  addMarketEntry,
  addEntryStopLimit,
  addEntryStopMarket,
  addTarget,
  addStopMarketTarget,
  addStoplossLimit,
  addStoplossMarket,
  resetTradeState,
  resetStoploss,
  resetTarget,
} from './simpleTrade/SimpleTradeActions'

import {
  fetchAnalysts,
  getAnalysts,
  getAnalystDrawing,
  saveAnalystDrawing,
  getAnalystFlags,
  saveAnalystFlags,
  updateEmojis,
  updateSelectEmojiPopoverOpen,
} from './analysts/AnalystsActions'

import {
  getWatchList,
  saveWatchList,
  deleteWatchList,
  updateSymbolsLists,
  updateWatchSymbolsLists,
  updateActiveWatchLists,
} from './watchlist/WatchlistActions'

export {
  updateSymbols,
  updateSymbolDetails,
  updateSelectedSymbol,
  updateSelectedSymbolDetail,
  updateSelectedSymbolBalance,
  updateSelectedBaseSymbolBalance,
  updateIsLoadingBalance,
  updateSelectedSymbolLastPrice,
  updateIsLoadingLastPrice,
  updateSymbolType,
  loadLastPrice,
  loadBalance,
  updateExchanges,
  updateIsExchangeLoading,
  updateExchangeType,
  updateExchangeUpdated,
  updateExchangeKey,
  loadExchanges,
  updateTotalExchanges,
  updateActiveExchange,
  updateIsException,
  initExchanges,
  getUserExchangesAfterFBInit,
  updateIsOrderPlaced,
  updateIsOrderCancelled,
  updateOpenOrdersUC,
  updateDelOpenOrders,
  updateOrderEdited,
  updateDisableOrderHistoryRefreshBtn,
  updateDisableOpenOrdesrRefreshBtn,
  updateDisablePortfolioRefreshBtn,
  updateDisableAnalyticsRefreshBtn,
  updateRefreshButton,
  refreshExchanges,
  updateTemplateDrawings,
  updateTemplateDrawingsOpen,
  updateAddTemplateModalOpen,
  getChartTemplate,
  saveChartTemplate,
  deleteChartTemplate,
  updateIsTradersModalOpen,
  updateActiveTrader,
  setActiveAnalysts,
  updateMarketData,
  updateShowMarketItems,
  updateWatchListOpen,
  initMarketData,
  updateProducts,
  getProducts,
  updateLoadApiKeys,
  updateLoadApiKeysError,
  updateIsApiKeysLoading,
  updateUserData,
  updateUserState,
  updateUserContextLoaded,
  updateCanaryUser,
  getUserData,
  saveUserData,
  saveInitialUserData,
  updateCountry,
  updateIsCountryAvailable,
  getReferrals,
  saveReferrals,
  saveStripeUsers,
  updateNeed2FA,
  updateTokenExpiry,
  updateSecretKey,
  getApiKeys,
  saveApiKeys,
  add2FA,
  verify2FA,
  delete2FA,
  login,
  logout,
  register,
  updateIsOnboardingSkipped,
  updateRememberCheck,
  updateLoaderVisible,
  updateOnTour,
  updateIsTourStep5,
  updateIsTourFinished,
  updateOnSecondTour,
  updateTour2CurrentStep,
  updateTwofaSecretKey,
  updateEndTrial,
  updateNeedPayment,
  updateShowSubModal,
  handleOnboardingSkip,
  handleOnboardingShow,
  sendEmailAgain,
  findFastServer,
  getPlatformMessages,
  getUserNotices,
  updateIsCheckingSub,
  updateHasSub,
  updateSubscriptionData,
  updateTrialDaysLeft,
  updateIsPaidUser,
  updateCreateSubscription,
  updateSubscriptionError,
  updateSubscriptionsDetails,
  getSubscription,
  getStripeplans,
  updateChartData,
  updateChartMirroring,
  updateIsChartReady,
  updateActiveDrawingId,
  updateActiveDrawing,
  updateAddedDrawing,
  updateChartDrawings,
  updateSettingChartDrawings,
  updateChartDataOnInit,
  updateSunburstChart,
  getChartMetaData,
  getChartDrawing,
  saveChartDrawings,
  backupChartDrawing,
  updatePairOperations,
  updatePairPerformance,
  updateAssetPerformance,
  updateAnalyticsLoading,
  updateLoadingError,
  refreshAnalyticsData,
  updateTickers,
  updateLastMessage,
  updateEstimate,
  updateBalance,
  updatePortfolioLoading,
  updateElapsed,
  updatePortMarketData,
  updateSelectedExchanges,
  refreshPortfolioData,
  addEntry,
  addMarketEntry,
  addEntryStopLimit,
  addEntryStopMarket,
  addTarget,
  addStopMarketTarget,
  addStoplossLimit,
  addStoplossMarket,
  resetTradeState,
  resetStoploss,
  resetTarget,
  fetchAnalysts,
  getAnalysts,
  getAnalystDrawing,
  saveAnalystDrawing,
  getAnalystFlags,
  saveAnalystFlags,
  updateEmojis,
  updateSelectEmojiPopoverOpen,
  getWatchList,
  saveWatchList,
  deleteWatchList,
  updateSymbolsLists,
  updateWatchSymbolsLists,
  updateActiveWatchLists,
}
